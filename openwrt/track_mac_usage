#!/bin/sh
# Keep track of download usage by mac adress:
# Watch arp table and save/restore ip counters when it changes
# Run this every minute in cron

# don't do anything if quota isn't setup
ipset list IP_QUOTA > /dev/null || exit 0

# lan interface
if=br-lan

####################################################################################
# total downloads by mac address
mac_counters=/tmp/mac_counters

get_mac_counter() {  ( grep -F $1 < $mac_counters || echo $1 0 ) | cut -d' ' -f2 ;  }

set_mac_counter()
{ 
    tmp=/tmp/mac_counters_
    grep -vF $1 < $mac_counters > $tmp
    echo $1 $2 >> $tmp
    mv $tmp $mac_counters
}

####################################################################################
# get/set ip counters

get_ip_counter()
{
    ( ipset save IP_QUOTA | grep -F "$1 " || 
      echo "add IP_QUOTA $1 packets 0 bytes 0" ) | cut -d' ' -f 7
}

set_ip_counter() {  ipset add -exist IP_QUOTA $1 bytes $2 ;  }

####################################################################################
# current / previous arp tables
cur=/tmp/arp
prev=/tmp/arp.prev

# just keep ip and mac
parse_arp() {  grep $if | sed -e 's/  */ /g' | cut -d' ' -f1,4 ;  }
list_arp()  {  tr ' ' '\n' ;  }
arp_has()   {  grep -qF "$1 $2" ;  }

####################################################################################

parse_arp < /proc/net/arp > $cur

# save usage of mac addresses which disappeared
list_arp < $prev | while read ip ; read mac; do
    if ! arp_has $ip $mac < $cur; then
	set_mac_counter $mac `get_ip_counter $ip`
	set_ip_counter $ip 0
    fi
done

# restore new mac addresses usage
list_arp < $cur | while read ip ; read mac; do
    if ! arp_has $ip $mac < $prev; then
	set_ip_counter $ip `get_mac_counter $mac`
    fi
done

mv $cur $prev
